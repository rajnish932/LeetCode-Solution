import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class MinHeightTrees {
    public static void main(String []arg) {
        int n = 6;
        int [][]edges = {{3,0},{3,1},{3,2},{3,4},{5,4}};
        System.out.println(findMinHeightTrees(n, edges));
    }
    private static List<Integer> findMinHeightTrees(int n, int[][] edges) {
        // 1. Create graph using adjacencyList
        List<Integer>[] graph = new List[n];
        int[] indegree = new int[n];
        for(int i= 0; i<n; i++) {
            graph[i] = new ArrayList<>();
        }
        // 2. add edges to graph
        for(int[] edge : edges) {
         graph[edge[0]].add(edge[1]);
         graph[edge[1]].add(edge[0]);
         //  Add degreee on each vertices
            indegree[edge[0]]++;
            indegree[edge[1]]++;
        }
        Queue<Integer> bfs = new LinkedList<>();
        for(int i= 0; i<n; i++) {
            if(indegree[i] == 1 || indegree[i] == 0) {
                bfs.add(i);
            }
        }
        int remNodes = n;
        while(remNodes >2) {
            int size = bfs.size();
            remNodes = remNodes-size;
            for(int i =0; i<size; i++) {
                int curr = bfs.poll();
                for(int neighbour: graph[curr]) {
                    indegree[neighbour]--;
                    if(indegree[neighbour] == 1) {
                        bfs.add(neighbour);
                    }
                }
            }
        }
        List<Integer> result = new ArrayList();
        while(!bfs.isEmpty()) {
            result.add(bfs.poll());
        }
        return result;
    }
}
