class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
         List<List<Integer>> results = new LinkedList<>();
        
        if(candidates == null || candidates.length == 0) return results;
        
        Arrays.sort(candidates);
        
        List<Integer> combination = new LinkedList<>();
        toFindCombinationToTarget(results, combination, candidates, target, 0);
        
        return results;
    }
    public void toFindCombinationToTarget(List<List<Integer>> results, List<Integer>combination,
                                         int candidates[], int target, int startIndex){
        if(target == 0){
            results.add(new LinkedList<>(combination));
            return;
        }
        for(int i = startIndex; i<candidates.length; i++){
            if(candidates[i] > target){
                break;
            }
            if(i > startIndex && candidates[i] == candidates[i-1]) continue;
            else {
            combination.add(candidates[i]);
            toFindCombinationToTarget(results, combination, candidates, target - candidates[i],i+1);
            combination.remove(combination.size() - 1);
            }
        }
    }
}
