class Solution {
    
    int []ans ;
    List<List<Integer>> adjList  = new ArrayList();
    Set<Integer>  visited = new HashSet<Integer>();
    
    public int[] countSubTrees(int n, int[][] edges, String labels) {
        ans = new int[n];
       // adjList = new ArrayList();
        
        //Initialized ArrayList
        for(int i =0;i<n;i++)
            adjList.add(new ArrayList()); 
        
        //Populate edges  i.e Tree Representation
        for(int []edge : edges){
            adjList.get(edge[0]).add(edge[1]);
             adjList.get(edge[1]).add(edge[0 ]);
        }
        
        // call DFS on root-->0 and labels
      //  visited = new HashSet<Integer>();
        dfs(0, labels);
        
        return ans;
    }
    int []dfs(int node, String labels){
        // Add First node into set 
        visited.add(node); 
        
        //Count each character at each node
        int count[] = new int[26];
        for (int adj :adjList.get(node)){
            
            
            if (!visited.contains(adj)){
                int []adjCount = dfs(adj, labels);
                for (int i =0;i<26;i++){
                 count[i] += adjCount[i]; 
                }
            }
        }
        char ch = labels.charAt(node);
        count[ch - 'a']++;
        
        ans[node] = count[ch - 'a'];
        return count;   
    }
}
