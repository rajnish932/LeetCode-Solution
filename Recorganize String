class Solution {
    public String reorganizeString(String S) {
        int n = S.length();
        int count[] = new int[26];
        
    //Store frequncies of all charactre in string
        
        for(int i = 0;i<n;i++){
            count[S.charAt(i)-'a']++;
        }
        
// Insert all characters with thier frequencies
        PriorityQueue<Key> pq = new PriorityQueue<>(new KeyComparator());
        for(char i= 'a' ;i<= 'z';i++){
            int val = i-'a';
            if(count[val] >0)
                pq.add(new Key(count[val], i));
        }
// str that will store resultant value
         S = "";
        
        Key prev = new Key(-1, '#');
        
  // traverse queue
        while(pq.size() != 0){
            Key k = pq.peek();
            pq.poll();
            S = S+ k.ch;
            
            
            if(prev.freq>0)
                pq.add(prev);
            
            k.freq--;
            prev = k;
        }
        
        return (n != S.length() ? "":S);
        
    }
}

class Key{
    int freq;
    char ch;
    Key(int fre, char c){
       freq = fre;
        ch = c;
    }
}

class KeyComparator implements Comparator<Key>{
    public int compare(Key k1, Key k2){
        if(k1.freq < k2.freq)
            return 1;
        else if(k1.freq > k2.freq)
            return -1;
        return 0;
    }
}
