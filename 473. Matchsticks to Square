class Solution {
    public boolean makesquare(int[] nums) {
        if (nums.length < 4) return false;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        if (sum % 4 != 0) return false;
        int len = sum / 4;
        Arrays.sort(nums);
        int[] desc = new int[nums.length];
        for (int i = nums.length - 1; i >= 0 ; i--) {
            desc[nums.length - i - 1] = nums[i];
        }
        if (desc[0] > len) return false;
        return dfs(desc, len, len, 0);
        
        
    }
    
    private boolean dfs(int[] nums, int remain, int len, int count) {
        if (count == 4) {
            return true;
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == -1) continue;
            if (nums[i] > remain) return false;
            int tmp = nums[i];
            nums[i] = -1;
            boolean res = dfs(nums, remain - tmp == 0 ? len : remain - tmp, len, remain - tmp == 0 ? count + 1 : count);
            nums[i] = tmp;
            if (res) {
                return true;
            }
        }
        
        return false;
    }
}
        
