class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new LinkedList<>();
        Arrays.sort(nums);
         boolean []used = new boolean[nums.length]; 
          dfs(result,nums, new ArrayList<>(),used);
         return result;
        
    }
    public void dfs(List<List<Integer>> result , int []nums, List<Integer> current, boolean []used){
        if(current.size() == nums.length){
          
        result.add(new ArrayList(current));
            return;
        }
        
        for(int i = 0; i<nums.length;i++){
            if(used[i] == true) continue;
            if(i>0 && nums[i] == nums[i-1] && !used[i-1]) continue;
            current.add( nums[i]);
            used[i] = true;
          dfs(result , nums, current, used);
            current.remove(current.size()-1);
            used[i]  = false;
        }
        
    }
}
