class Solution {
    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
        
        
        if (n <= 0 || edges == null || hasApple == null || hasApple.size() != n) {
            return -1;
        }
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);
        }
        return Math.max(0, minTimeHelper(0, adjList, hasApple, -1)-2);
    }
    
    private int minTimeHelper(int node, List<List<Integer>> adjList, List<Boolean> hasApple,
                                    int parent) {
        int res = 0;
        for (int neigh : adjList.get(node)) {
            if (neigh != parent) {
                res += minTimeHelper(neigh, adjList, hasApple, node);
            }
        }
        if (res > 0 || hasApple.get(node)) {
            res += 2;
        }
        return res;
    }
}
