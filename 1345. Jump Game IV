class Solution {
    public int minJumps(int[] arr) {
        if(arr.length == 1) return 0;
        
        int jump = 0;
        Map<Integer, List<Integer>> map = new HashMap<>();
        int []visited = new int[arr.length];
        
        for(int i=0;i<arr.length;i++){
            if(map.containsKey(arr[i])) {
                 map.get(arr[i]).add(i);
                
            } else {
                map.put(arr[i], new ArrayList()); 
                map.get(arr[i]).add(i);
            }
        }
        Queue<Integer>queue = new LinkedList<>();
        queue.add(0); // Start Index
        
        // Iterate queue
        while(!queue.isEmpty()){
            
            int size = queue.size();
            for(int  i=0;i<size;i++){
                
                int index = queue.poll();
                if (index == arr.length-1) return jump;
                
                if(index -1 >=0 && index- 1< arr.length && visited[index-1] == 0){
                    queue.add(index-1); 
                    visited[index-1] = 1;
                }
                
                if(index +1 >=0 && index+1< arr.length && visited[index+1] == 0){
                    queue.add(index+ 1); 
                    visited[index+1] = 1;
                }
                // To access same value or twins , need map
                if(map.containsKey(arr[index])){
                     for(int num :map.get(arr[index])){
                         queue.add(num); 
                         visited[num] = 1;
                     }
                    map.remove(arr[index]);
                }
                
            }
            jump++;
            
        }
        return jump;
        
    }
}
