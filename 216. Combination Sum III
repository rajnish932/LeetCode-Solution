class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> combinationSum = new ArrayList<>();
          dfs(combinationSum , 1, k, n, new ArrayList<>());
        return combinationSum;
        
        
    }
    public void dfs(List<List<Integer>> combinationSum ,int startIndex,  int k , int n, List<Integer> current){
        if(current.size() == k){
        if(n == 0) {
            combinationSum.add(new ArrayList<>(current));
              
        }
            return;   
        } 
     
        for(int i = startIndex;i<= 9;i++){
            current.add( i);  
            dfs(combinationSum, i+1,k,n-i ,current);
            current.remove(current.size()-1);
        }
    }
}
