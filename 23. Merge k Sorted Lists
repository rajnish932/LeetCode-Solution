/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        return partition(lists, 0, lists.length-1);
        
    }
    private ListNode partition(ListNode[] lists, int left, int right){
        if(left == right) return lists[left];
        
        if(left > right) return null;
        
        int mid = left + (right - left)/2;
        
        ListNode leftNode = partition(lists, left, mid);
        ListNode rightNode = partition(lists, mid+1, right);
        
        return mergetwoList(leftNode, rightNode);
    }
    
    private ListNode mergetwoList(ListNode leftNode, ListNode rightNode){
        ListNode front = new ListNode();
        ListNode current = front;
        
        while(leftNode != null || rightNode != null){
        
        if(leftNode == null){
            current.next = rightNode;
            break;
        }
        if(rightNode == null){
            current.next = leftNode;
            break;
        }    
        if(leftNode.val < rightNode.val){
            current.next = leftNode;
            leftNode = leftNode.next;
        }
            else{
                current.next = rightNode;
                rightNode = rightNode.next;
            }
        current = current.next;    
        }
        return front.next;
    }
}
