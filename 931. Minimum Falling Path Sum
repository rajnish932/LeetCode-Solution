class Solution {
    public int minFallingPathSum(int[][] A) {
       int row = A.length; 
        int col = A[0].length; 
         HashMap<String, Integer> map = new HashMap();
        int ans = Integer.MAX_VALUE;
        for(int i= 0;i<col;i++)
            ans = Math.min(ans, recursive (0, i, A,map));
            
            return ans;
    }
      public static int recursive(int i, int j, int A[][],  HashMap<String, Integer> map ){
        
       
        int row = A.length; 
        int col = A[0].length; 
          
          if(i == row) return 0;
          if( j< 0 || j>= col) return Integer.MAX_VALUE;
          
          String key = i +"hashMapKey"+ j;
          
          if(map.containsKey(key)) return map.get(key);
        
          int op1 = recursive(i+1, j-1, A, map);
          int op2 = recursive(i+1, j, A, map);
          int op3 = recursive(i+1, j+1, A, map);
          map.put(key, A[i][j] + Math.min(op1, Math.min(op2, op3)));
          
          return A[i][j] + Math.min(op1, Math.min(op2, op3));
          
          
    }
}
