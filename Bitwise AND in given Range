class Solution {
    
   /**** An efficient solution is to follow following steps.
1) Find position of Most Significant Bit (MSB) in both numbers.
2) If positions of MSB are different, then result is 0.
3) If positions are same. Let positions be msb_p.
……a) We add 2msb_p to result.
……b) We subtract 2msb_p from x and y,
……c) Repeat steps 1, 2 and 3 for new values of x and y.

Example 1 :
x = 10, y = 20
Result is initially 0.
Position of MSB in x = 3
Position of MSB in y = 4
Since positions are different, return result.

Example 2 :
x = 17, y = 19
Result is initially 0.
Position of MSB in x = 4
Position of MSB in y = 4
Since positions are same, we compute 24.

We add 24 to result. 
Result becomes 16.

We subtract this value from x and y.
New value of x  = x - 24  = 17 - 16 = 1
New value of y  = y - 24  = 19 - 16 = 3

Position of MSB in new x = 1
Position of MSB in new y = 2
Since positions are different, we return result.
   
   */
    
    public int rangeBitwiseAnd(int m, int n) {
        if(m == 0 || n == 0) return 0;
        
        int res = 0; // Initialize result 

		while (m > 0 && n > 0) { 
			
			// Find positions of MSB in x and y 
			int msb_p1 = msbPos(m); 
			int msb_p2 = msbPos(n); 

			// If positions are not same, return 
			if (msb_p1 != msb_p2) 
				break; 

			// Add 2^msb_p1 to result 
			int msb_val = (1 << msb_p1); 
			res = res + msb_val; 

			// subtract 2^msb_p1 from x and y. 
			m = m - msb_val; 
			n = n - msb_val; 
		} 

		return res; 
    }
     int msbPos(int n) 
	{ 
		
		int msb_p = -1; 
		while (n > 0) { 
			n = n >> 1; 
			msb_p++; 
		} 
		
		return msb_p; 
	} 
}
