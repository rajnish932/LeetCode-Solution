class Solution {
     public int numMatchingSubseq(String s, String[] words) {
         int result = 0;
        Map<String, Integer> wordCount = new HashMap<>();
        Set<String> distintWords = new HashSet<>();
        for(String word: words) {
            if(!wordCount.containsKey(word)) distintWords.add(word);
            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);
                                             
        }

        for(String word: distintWords) {
            if(isSubsequence(word, s)) {
                result += wordCount.get(word);
            }
        }
        return result;
    }    
        
//          int result = 0;
//         // for(String word : words) {
//         //     if(word.length() > str.length()) continue;
//         //     if(isSubsequence(word, str)) result++;
        
        
        
        
        
//          Map<String, Integer> wordCount = new HashMap<>();
//         Set<String> distinctWords = new HashSet<>();
//         for(String word : words) {
//             if(!wordCount.containsKey(word)) {distinctWords.add(word);
//             wordCount.put(word, wordCount.getOrDefault(word,0) + 1);
//             }
//         }
//         for(String word : distinctWords) {
//              if(word.length() > str.length()) continue;
//             if(isSubsequence(word, str)) {
//                 result += wordCount.get(word);
//             }
        
//         }
//         return result;
//     }

    private static boolean isSubsequence(String word, String str) {
        int wordIndex = 0;
        for(int i =0; i<str.length() && wordIndex < word.length(); i++) {
            if(str.charAt(i) == word.charAt(wordIndex))
                wordIndex++;
        }
        return wordIndex == word.length();
        
    }
}
