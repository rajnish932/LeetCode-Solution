/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null) return "X";
        String leftSerialize = serialize(root.left);
        String rightSerialize = serialize(root.right);
        
        return root.val+ "," +leftSerialize+ ","+ rightSerialize;
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String arr[] = data.split(",");
        Queue<String> queue = new LinkedList<>();
        for(int  i =0;i<arr.length; i++)
            queue.add(arr[i]);
        
        TreeNode root = deserialize(queue);
        
        return root;
        
        
    }
    public static TreeNode deserialize(Queue<String> queue){
        if(queue.size() == 0) return null;
        String peek = queue.poll();
        if(peek.equals("X")) return null;
        
        //Convert String to Integer
        TreeNode root = new TreeNode(Integer.parseInt(peek));
        root.left = deserialize(queue);
        root.right = deserialize(queue);
        
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// String tree = ser.serialize(root);
// TreeNode ans = deser.deserialize(tree);
// return ans;
