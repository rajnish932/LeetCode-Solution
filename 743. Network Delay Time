class Solution {
    public int networkDelayTime(int[][] times, int N, int K) {
        
        double[][] disTo = new double[N][N];
        
        
        //Initally assume all elements are infinity
        for(int i =0; i<N;i++){
            Arrays.fill(disTo[i], Double.POSITIVE_INFINITY);
        }
        
        
        // Diagonal element should be zero
        for(int i =0;i<N;i++){
            disTo[i][i] = 0;
        }
        
        
        // Assign value of times into disTo
        // Relation between times and  disTo
        for (int[] edge: times) {
        disTo[edge[0] - 1][edge[1] - 1] = edge[2];
    }
        
       // Appaly  Floyd Warshall Algorithm
        for(int k=0;k<N;k++){
            for(int i =0; i<N; i++){
                for(int j =0; j<N; j++){
                    if(disTo[i][j] > disTo[i][k] + disTo[k][j])
                        disTo[i][j] = disTo[i][k] + disTo[k][j];
                }
            }
        }
        
        double max = Double.MIN_VALUE;
        for(int i =0;i<N; i++){
            if(disTo[K-1][i] == Double.POSITIVE_INFINITY) return -1;
            
            max = Math.max(max, disTo[K-1][i]);
        }
         return (int)max;
        
        
        
    }
}
