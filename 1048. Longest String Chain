class Solution {
    int max = 0;
    List<int[]> list;
    String[] words;
    boolean[] visited;
    int maxPossible = 0;
	
    public int longestStrChain(String[] words) {
        visited = new boolean[words.length];
        this.words = words;
        Arrays.sort(words, (a, b) -> { return a.length() - b.length(); });
        list = new ArrayList();
        
        for (String word : words) {
            int[] arr = new int[26];
            for (char c : word.toCharArray())
                arr[(int)(c - 'a')]++;
            list.add(arr);
        }
		
        maxPossible = words[words.length - 1].length() - words[0].length() + 1;
        visited[0] = true;
        findMax(-1, 0, 0);
        return max;
    }
    
    
    
    //recursive function to find maxchain length
    public void findMax(int prev, int curr, int length) {
        if (max == maxPossible)
            return;
        max = Math.max(max, length);
	
		
        for (int i = curr; i < words.length; i++) {
            if (prev != -1 && words[i].length() - words[prev].length() > 1)
                return;
            if (prev == -1 || (!visited[i] && compare(list.get(prev), list.get(i)))) {
                visited[i] = true;
                findMax(i, i + 1, length + 1);
            }
        }
    }
    
    //compare two words return true if w2 can be formed by adding one char
    public boolean compare(int[] w1, int[] w2) {
        boolean flag = false;
        for (int i = 0; i < 26; i++) {
            int diff = w2[i] - w1[i];
            if (diff > 1 || diff < 0)
                return false;
            if (diff == 1) {
                if (flag)
                    return false;
                flag = true;
            }
        }
        return flag;
    }
}
